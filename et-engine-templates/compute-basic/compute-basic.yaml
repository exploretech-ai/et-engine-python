Parameters:
  toolID:
    Type: String
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Resources:
  CodeBucketFF4C7AD6:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - ""
          - - tool-
            - Ref: toolID
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ComputeBasicStack/CodeBucket/Resource
  CodeBucketPolicy637E7C14:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CodeBucketFF4C7AD6
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - CodeBucketFF4C7AD6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CodeBucketFF4C7AD6
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ComputeBasicStack/CodeBucket/Policy/Resource
  CodeBucketAutoDeleteObjectsCustomResourceA4EDF0CF:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: CodeBucketFF4C7AD6
    DependsOn:
      - CodeBucketPolicy637E7C14
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: ComputeBasicStack/CodeBucket/AutoDeleteObjectsCustomResource/Default
  CodeBucketNotifications9E54147D:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: CodeBucketFF4C7AD6
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            LambdaFunctionArn:
              Fn::GetAtt:
                - codebuildtrigger9AB2B5F9
                - Arn
      Managed: true
    DependsOn:
      - CodeBucketAllowBucketNotificationsToComputeBasicStackcodebuildtrigger21EFA26BBA183F57
    Metadata:
      aws:cdk:path: ComputeBasicStack/CodeBucket/Notifications/Resource
  CodeBucketAllowBucketNotificationsToComputeBasicStackcodebuildtrigger21EFA26BBA183F57:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - codebuildtrigger9AB2B5F9
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount: "734818840861"
      SourceArn:
        Fn::GetAtt:
          - CodeBucketFF4C7AD6
          - Arn
    Metadata:
      aws:cdk:path: ComputeBasicStack/CodeBucket/AllowBucketNotificationsToComputeBasicStackcodebuildtrigger21EFA26B
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ComputeBasicStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-734818840861-us-east-2
        S3Key: b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs18.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: CodeBucketFF4C7AD6
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: ComputeBasicStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6
      aws:asset:property: Code
  codebuildtriggerServiceRole85085266:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ComputeBasicStack/codebuild-trigger/ServiceRole/Resource
  codebuildtriggerServiceRoleDefaultPolicy7CBEB25A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: codebuild:StartBuild
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: codebuildtriggerServiceRoleDefaultPolicy7CBEB25A
      Roles:
        - Ref: codebuildtriggerServiceRole85085266
    Metadata:
      aws:cdk:path: ComputeBasicStack/codebuild-trigger/ServiceRole/DefaultPolicy/Resource
  codebuildtrigger9AB2B5F9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "

          import boto3

          def handler(event, context):

          \    tool = event['Records'][0]['s3']['bucket']['name']

          \    codebuild = boto3.client('codebuild')

          \    codebuild.start_build(projectName=tool)

          \            "
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - codebuildtriggerServiceRole85085266
          - Arn
      Runtime: python3.8
    DependsOn:
      - codebuildtriggerServiceRoleDefaultPolicy7CBEB25A
      - codebuildtriggerServiceRole85085266
    Metadata:
      aws:cdk:path: ComputeBasicStack/codebuild-trigger/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: ComputeBasicStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: ComputeBasicStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def with_id(n):
              n['Id'] = f"{stack_id}-{hash(json.dumps(n, sort_keys=True))}"
              return n

            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  ids = [with_id(n) for n in old.get(t, [])]
                  old_incoming_ids = [n['Id'] for n in ids]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            if request_type == 'Delete':
              return external_notifications

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: ComputeBasicStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  ContainerRepo0A04718B:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Fn::Join:
          - ""
          - - tool-
            - Ref: toolID
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ComputeBasicStack/ContainerRepo/Resource
  DockerBuilderRole896034E6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: ComputeBasicStack/DockerBuilder/Role/Resource
  DockerBuilderRoleDefaultPolicy395020BF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - CodeBucketFF4C7AD6
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CodeBucketFF4C7AD6
                        - Arn
                    - /tool.zip
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - arn:aws:logs:us-east-2:734818840861:log-group:/aws/codebuild/
                    - Ref: DockerBuilder853C5BC3
                    - :*
              - Fn::Join:
                  - ""
                  - - arn:aws:logs:us-east-2:734818840861:log-group:/aws/codebuild/
                    - Ref: DockerBuilder853C5BC3
          - Action:
              - codebuild:BatchPutCodeCoverages
              - codebuild:BatchPutTestCases
              - codebuild:CreateReport
              - codebuild:CreateReportGroup
              - codebuild:UpdateReport
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - arn:aws:codebuild:us-east-2:734818840861:report-group/
                  - Ref: DockerBuilder853C5BC3
                  - -*
          - Action:
              - ecr:*
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:CompleteLayerUpload
              - ecr:InitiateLayerUpload
              - ecr:PutImage
              - ecr:UploadLayerPart
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ContainerRepo0A04718B
                - Arn
        Version: "2012-10-17"
      PolicyName: DockerBuilderRoleDefaultPolicy395020BF
      Roles:
        - Ref: DockerBuilderRole896034E6
    Metadata:
      aws:cdk:path: ComputeBasicStack/DockerBuilder/Role/DefaultPolicy/Resource
  DockerBuilder853C5BC3:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
        Type: NO_CACHE
      EncryptionKey: alias/aws/s3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: IMAGE_TAG
            Type: PLAINTEXT
            Value: latest
          - Name: AWS_DEFAULT_REGION
            Type: PLAINTEXT
            Value: us-east-2
          - Name: ECR_REPO_URI
            Type: PLAINTEXT
            Value:
              Fn::Join:
                - ""
                - - Fn::Select:
                      - 4
                      - Fn::Split:
                          - ":"
                          - Fn::GetAtt:
                              - ContainerRepo0A04718B
                              - Arn
                  - .dkr.ecr.
                  - Fn::Select:
                      - 3
                      - Fn::Split:
                          - ":"
                          - Fn::GetAtt:
                              - ContainerRepo0A04718B
                              - Arn
                  - "."
                  - Ref: AWS::URLSuffix
                  - /
                  - Ref: ContainerRepo0A04718B
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value:
              Fn::Join:
                - ""
                - - tool-
                  - Ref: toolID
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: "734818840861"
        Image: aws/codebuild/standard:5.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Name:
        Fn::Join:
          - ""
          - - tool-
            - Ref: toolID
      ServiceRole:
        Fn::GetAtt:
          - DockerBuilderRole896034E6
          - Arn
      Source:
        Location:
          Fn::Join:
            - ""
            - - Ref: CodeBucketFF4C7AD6
              - /tool.zip
        Type: S3
    Metadata:
      aws:cdk:path: ComputeBasicStack/DockerBuilder/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1WQwW7DIBBEvyV3TOtESs9NpJ4t9wMqDNt0Y2ArFhpFiH8vtuNaPc3bmWVA7GW7P8rnnbpxo83YWBxkfo9Kj+L86TsVlIMIQdT8I/NB5lPSI8QpfNAiHVnU981e5iKscoNRMk9lEBwyI3nxlryOE1R75SJQOZl7sjDZs26tax/oUHfgmxgjhTnapiI0GRgSWiNzF+gKen7pA0sR58SRXA9MKejlnj/+F9UjP2ggnBSDeGWGWD/lgv4i1o0iunv8Iv90kG0rX3ZXRmxC8hEdyH7RX2IdOP5eAQAA
    Metadata:
      aws:cdk:path: ComputeBasicStack/CDKMetadata/Default
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

